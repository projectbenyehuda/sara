%h1 SARA project
%ul
  %li Smart
  %li Automatic
  %li Research
  %li Assistant

To be Done: This is a stub page

%hr
%h2 Browsing tree prototyping
%ul
  - @menu.each do |node|
    %li
      = "#{node['title']} (#{node['description']})"
      - if node['nodetype'] == 'branch' && node['base_query'].present?
        %p= 'Please pick at least one filter:'
        %ul
          - @filters['wikidata'].select{|f| f['relevant_base_queries'].include?(node['base_query'])}.each do |f|
            %li
              %b= f['title']
              = " (#{f['description']})"
              - f['param_count'].times do |i|
                - default_value = f['default_param_values'][i] if f['default_param_values'].present?
                - if f['lookup_type'] == 'autocomplete'
                  = text_field_tag "param_#{f['tag']}_#{i}", nil, {placeholder: default_value, 'data-behavior': 'autocomplete', 'data-tag': f['tag']}
                  = hidden_field_tag "param_#{f['tag']}_#{i}_value"
                - elsif f['lookup_type'] == 'dropdown'
                  = select_tag "param_#{f['tag']}_#{i}", options_for_select(options_from_query(f['tag']), default_value), {include_blank: :true, 'data-tag': f['tag']}
              = button_tag 'run query!', {id: 'run_'+f['tag'], class: 'run_query', data: {'base-query': node['base_query'], 'tag': f['tag'], 'disable_with': 'querying...'}}
      - else
        %p TODO: add code to handle leaf nodes
  %h3 Results
  %ol#result_list
:javascript
  $(document).ready(function() {
    $('*[data-behavior=autocomplete]').each(function() {
      var iid = $(this).attr('id');
      var tag = $(this).data('tag');
      options = { 
        url: function(phrase) { return "#{autocomplete_by_filter_tag_path}?phrase=" + phrase + "&tag=" + tag + "&format=json";}, 
        getValue: "name",
        list: { 
      		match: { enabled: true },
          onChooseEvent: function() {
            var value = $('#'+iid).getSelectedItemData().qid;
            $('#'+iid+'_value').val(value);
          }
        }
      };
      $(this).easyAutocomplete(options);
    });
    $('.run_query').click(function() {
      $(this).text('querying...');
      $(this).prop('disabled', true);
      var base_query = $(this).data('base-query');
      var tag = $(this).data('tag');
      var params = [];

      url = "#{query_by_filter_path}?base_query=" + base_query + "&filter=" + tag + "&q=" + $('#param_'+tag+'_0_value').val() + "&format=json";
      $.ajax({type: 'get', url: url, context: this, success: function(response, status){
        response.forEach(function(item) {
          $('#result_list').append('<li>'+item.name+' ('+item.qid.replace('wd:','')+')</li>');
        });
        $(this).text('run query!');
        $(this).prop('disabled', false);
        console.log(response);
      }});

    }); 
  });